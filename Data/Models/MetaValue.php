<?php

namespace ixavier\LaravelLibraries\Data\Models;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Relations;
use ixavier\LaravelLibraries\Data\Meta\Mutators\BaseMutator;

/**
 * Class MetaValue holds a value for a given model meta
 *
 * @property mixed $value Casted value
 * @property string $raw_value Raw DB value (dynamic var)
 * @property int $value_id If definition references an ID in the db, this is the indexed ID for faster reference
 * @property int $model_id Model ID this value belongs to
 * @property int $meta_definition_id MetaDefinition ID this value belongs to
 * @property MetaDefinition $metaDefinition Corresponding meta definition object
 *
 */
class MetaValue extends DataEntry
{
    /** @var string Table name */
    protected $table = 'meta_values';

    /** @var array The attributes that are mass assignable. */
    protected $fillable = [
        'value',
        'value_id',
        'model_id',
        'meta_definition_id',
    ];

    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
    }

    /**
     * Raw value
     * @return string|null
     */
    public function getRawValue(): ?string
    {
        return $this->getAttribute('value');
    }

    /**
     * @param mixed $value Actual value
     * @param Model|int|null $value_id If its a reference, this is the ID
     * @return BaseMutator
     */
    protected function getMetaMutator($value, $value_id = null): BaseMutator
    {
        $type = $this->metaDefinition()->first()->type;
        // @todo: May want to look for project specific mutators
        $class = '\\ixavier\\LaravelLibraries\\Data\\Meta\\Mutators\\' . ucfirst($type) . 'Mutator';

        if (class_exists($class)) {
            $is_reference = $class::isValueReference();
            /** @var BaseMutator $mutator */
            return new $class($is_reference ? $value_id : $value);
        }
        return new BaseMutator($value);
    }

    /**
     * @return string|array|mixed|Model
     */
    public function getValue()
    {
        $mutator = $this->getMetaMutator($this->getAttribute('value'), $this->getAttribute('value_id'));
        return $mutator->deserialize();
    }

    /**
     * @param mixed $value Value for this object
     */
    public function setValue($value): void
    {
        $mutator = $this->getMetaMutator($value, $value);
        $attribute = get_class($mutator)::isValueReference() ? 'value_id': 'value';
        $this->setAttribute($attribute, $mutator->serialize());
    }

    /**
     * @return MetaDefinition|Relations\BelongsTo
     */
    public function metaDefinition()
    {
        return $this->belongsTo(MetaDefinition::class, 'meta_definition_id');
    }

    /**
     * Magic getter
     * @param string $key Name of attribute
     * @return array|mixed|string|Model Value
     */
    public function __get($key)
    {
        if ($key === 'value') {
            return $this->getValue();
        }
        return parent::__get($key); // TODO: Change the autogenerated stub
    }

    /**
     * Magic setter
     * @param string $key Name of attribute
     * @param mixed $value New value
     */
    public function __set($key, $value)
    {
        if ($key === 'value') {
            $this->setValue($value);
            return;
        }
        parent::__set($key, $value);
    }
}
