<?php

namespace ixavier\LaravelLibraries\Data\Models;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Relations;

/**
 * Class MetaValue holds a value for a given model meta
 *
 * @property mixed $value Casted value
 * @property string $raw_value Raw DB value (dynamic var)
 * @property int $value_id If definition references an ID in the db, this is the indexed ID for faster reference
 * @property int $model_id Model ID this value belongs to
 * @property int $meta_definition_id MetaDefinition ID this value belongs to
 * @property MetaDefinition $metaDefinition Corresponding meta definition object
 *
 */
class MetaValue extends DataEntry
{
    /** @var string Table name */
    protected $table = 'meta_values';

    /** @var int Encoding options for JSON for this instance */
    protected $encoding_options = self::DEFAULT_ENCODING_OPTIONS;

    /** @var array The attributes that are mass assignable. */
    protected $fillable = [
        'value',
        'value_id',
        'model_id',
        'meta_definition_id',
    ];

    public function __construct(array $attributes = [], ?int $encoding_options = self::DEFAULT_ENCODING_OPTIONS)
    {
        $this->encoding_options = $encoding_options;
        parent::__construct($attributes);
    }

    /**
     * Raw value
     * @return string|null
     */
    public function getRawValue(): ?string
    {
        return $this->getAttribute('value');
    }

    /**
     * @return string|array|mixed|Model
     */
    public function getValue()
    {
        $type = $this->metaDefinition->type;
        $method = 'get' . ucfirst($type) . 'Value';
        if (method_exists($this, $method)) {
            return call_user_func([$this, $method], ...func_get_args());
        }

        return $this->getAttribute('value');
    }

    /**
     * @param mixed $value Value for this object
     */
    public function setValue($value): void
    {
        $type = $this->metaDefinition->type;
        $method = 'set' . ucfirst($type) . 'Value';
        if (method_exists($this, $method)) {
            call_user_func([$this, $method], ...func_get_args());
        }
    }

    /**
     * @return Carbon|null Carbon object if its a date string
     */
    public function getDateValue(): ?Carbon
    {
        return Carbon::createFromTimeString($this->getAttribute('value'));
    }

    /**
     * @return Model|null Model object if its a model ID
     */
    public function getModelValue(): ?Model
    {
        $v = $this->getAttribute('value_id');
        print_r(['looking for', $v]);
        return Model::query()->where('id', '=', $v)->first();
    }

    /**
     * @return array|null Array if its a JSON string
     */
    public function getJsonValue(): ?array
    {
        return json_decode($this->getAttribute('value'), true);
    }

    /**
     * @param Carbon $date Carbon date
     */
    public function setDateValue(Carbon $date): void
    {
        $this->setAttribute('value', $date->toDateTimeString());
    }

    /**
     * @param int $model_id ID of model
     */
    public function setModelValue(int $model_id): void
    {
        if ($model_id <= 0) {
            throw new \InvalidArgumentException("Model ID has to be a positive integer for " . $this->metaDefinition->getUniqueName());
        }
        $this->setAttribute('value_id', $model_id);
    }

    /**
     * @param mixed $value Value will be converted to JSON string on DB
     */
    public function setJsonValue($value): void
    {
        $this->setAttribute('value', json_encode($value, $this->encodingOptions));
    }

    /**
     * @return MetaDefinition|Relations\BelongsTo
     */
    public function metaDefinition()
    {
        return $this->belongsTo(MetaDefinition::class, 'meta_definition_id');
    }

    /**
     * Magic getter
     * @param string $key Name of attribute
     * @return array|mixed|string|Model Value
     */
    public function __get($key)
    {
        if ($key === 'value') {
            return $this->getValue();
        }
        return parent::__get($key); // TODO: Change the autogenerated stub
    }

    /**
     * Magic setter
     * @param string $key Name of attribute
     * @param mixed $value New value
     */
    public function __set($key, $value)
    {
        if ($key === 'value') {
            $this->setValue($value);
            return;
        }
        parent::__set($key, $value);
    }
}
